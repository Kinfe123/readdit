// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        String    @id
  email     String  @unique
  password  String
  username  String? @unique
  name      String?
  books     Book[]  @relation("AuthorBooks")
  votes     Vote[]
  session   Session[] 
}
model Session {
  id        String   @id 
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Book {
  id          String    @id @default(uuid())
  title       String
  description String
  author      String
  authorId    String
  approveStatus  ApporvalStatus @default(PENDING)  
  authorUser  User    @relation("AuthorBooks", fields: [authorId], references: [id])
  votes       Vote[]
}

model Vote {
  id      String  @id @default(uuid())
  bookId  String
  userId  String
  type    VoteType
  book    Book  @relation(fields: [bookId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@unique([bookId, userId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum ApporvalStatus {
  APPROVED
  PENDING
  REJECTED
}